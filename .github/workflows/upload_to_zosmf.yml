name: Upload and compile a COBOL pgm on Z/OS V1.5
#
# upload a JCL or CBL file to a PDS on Z/OS mainframe
# then run the JCL to compile the program
#
run-name: ${{github.actor}} has triggered ${{github.workflow}}

on:
  push:
    branches: [ main ]
    paths: ['**.CBL' , '**.JCL']
    
  workflow_dispatch:

jobs:
  cobol-check:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    env:
        ZOWE_CLI_HOME: ".github/.zowe"
        ZOWE_USERNAME: ${{ secrets.ZOWE_USERNAME }}
        ZOWE_PASSWORD: ${{ secrets.ZOWE_PASSWORD }}

    steps:
    
    - uses: actions/checkout@v4

    - name: init
      run: |
        echo "Running upload and compile Cobol"
        echo "home=$ZOWE_CLI_HOME"
      
    - name: Install ZOWE CLI
      run: npm install -g @zowe/cli@latest

    - name: setup_lowercase username
      run: |
        LOWERCASE_USERNAME=$(echo "$ZOWE_USERNAME" | tr '[:upper:]' '[:lower:]')
        echo "lowercase un=$LOWERCASE_USERNAME"
        echo "LOWERCASE_USERNAME=$LOWERCASE_USERNAME" >> $GITHUB_ENV

    - name: Check if USS files exist
      run: |
        rtn_sts=false
        zowe zos-files list uss-files "/z/$LOWERCASE_USERNAME/cobolcheck" --u $ZOWE_USERNAME --pw $ZOWE_PASSWORD && rtn_sts=true
        echo "return=$rtn_sts"
        echo "cobolcheck_exists=$rtn_sts" >> $GITHUB_ENV
    
    - name: Setup Mainframe USS Environment and Upload COBOL Check
      if: env.cobolcheck_exists != true
      run: |
        chmod +x .github/scripts/zowe_operations_t.sh
        .github/scripts/zowe_operations_t.sh
        # Add actual cobolcheck commands here
        
    - name: Run COBOL Check on Mainframe
      # Here we'll add our commands to setup cobolcheck
      #  sshpass -p "$ZOWE-PASSWORD" ssh -o "StrictHostKeyChecking"=no $ZOWE_USERNAME@204.90.115.200 'sh -s' < .github/scripts/mainframe_operations.sh
      run: |
        echo "---> mainframe ops"
        chmod +x .github/scripts/mainframe_operations_t.sh
        .github/scripts/mainframe_operations_t.sh
      # Add actual cobolcheck commands here

    - name: Done
      run: echo "Done"
